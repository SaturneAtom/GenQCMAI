def main():
    st.title("Chat with your PDF üí¨")
    
    pdf = st.file_uploader('Upload your PDF Document', type='pdf', key="pdf_uploader")
    
    if pdf is not None:
        pdf_reader = PdfReader(pdf)
        # Text variable will store the pdf text
        text = ""
        for page in pdf_reader.pages:
            text += page.extract_text()
        
        # Create the knowledge base object
        knowledgeBase = process_text(text)
        
        st.write("PDF uploaded successfully! üéâ")

        tab1, tab2, tab3 = st.tabs(["Cat", "Dog", "Owl"])

         with tab1:    
            if st.button("Create a list of questions (Type 1)", key="list_questions_1"):
                query = "Agis en tant que professeur d'universit√©, je veux g√©n√©rer une liste de 10 questions pertinentes pour aider l'√©tudiant dans son apprentissage"
  
            docs = knowledgeBase.similarity_search(query)

            llm = OpenAI()
            chain = load_qa_chain(llm, chain_type='stuff')
                
            with get_openai_callback() as cost:
                response = chain.run(input_documents=docs, question=query)
                print(cost)
                    
            st.write(response)

    with tab2:
        if st.button("Create a list of questions (Type 2)", key="list_questions_2"):
            query = "Agis en tant que professeur d'universit√©, je veux g√©n√©rer une liste de 3 exercices √† trou pour aider l'√©tudiant dans son apprentissage"
  
            docs = knowledgeBase.similarity_search(query)

            llm = OpenAI()
            chain = load_qa_chain(llm, chain_type='stuff')
                
            with get_openai_callback() as cost:
                response = chain.run(input_documents=docs, question=query)
                print(cost)
                    
            st.write(response)
        
    cancel_button = st.button('Cancel')
        
    if cancel_button:
        st.stop()
            
if __name__ == "__main__":
    main()
